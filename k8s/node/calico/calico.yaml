# Calico Version v3.0.1
# https://docs.projectcalico.org/v3.0/releases#v3.0.1
# This manifest includes the following component versions:
#   calico/node:v3.0.1
#   calico/cni:v2.0.0
#   calico/kube-controllers:v2.0.0

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "http://192.168.57.2:2379,http://192.168.57.3:2379,http://192.168.57.4:2379"

  # Configure the Calico backend to use.
  calico_backend: "bird"

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
            "type": "calico",
            "etcd_endpoints": "__ETCD_ENDPOINTS__",
            "etcd_key_file": "__ETCD_KEY_FILE__",
            "etcd_cert_file": "__ETCD_CERT_FILE__",
            "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
            "log_level": "info",
            "mtu": 1500,
            "ipam": {
                "type": "calico-ipam"
            },
            "policy": {
                "type": "k8s",
                "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
            },
            "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
            }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  # etcd_ca: ""   # "/calico-secrets/etcd-ca"
  # etcd_cert: "" # "/calico-secrets/etcd-cert"
  # etcd_key: ""  # "/calico-secrets/etcd-key"
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following files with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # This self-hosted install expects three files with the following names.  The values
  # should be base64 encoded strings of the entire contents of each file.
  # etcd-key: null
  # etcd-cert: null
  # etcd-ca: null
  etcd_ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVQ3kvclBPN3dJcDFUdllIOVhxWlhTSzh0Z1Qwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEU0TURJd016QTROREV3TUZvWERUSXpNREl3TWpBNE5ERXdNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHJkaWpuRm5rTTliaWNDczFoRmcKYlFGRHFMZTlQNWhsQkNKUGFOcXoyS3lXMTNYSzZpcEsydk9iWkt6WE9vZWFRS2JjN2dLTHFRNVNxSlp2NTNaRwp1NmUxOXFpQSsrVXRKcG5KZXl2WUFVN0o3cHNOY08xMktVck5jVzNjT0xpRGZ4RFF4VHlPSmxCOUNTM2NtcjBlCmF1eFhJUFZZU2VkbCtCS0Z6S3VBT29OOWlJRWxFY1lpNUxqZWlRRjgrcnlGUkl4elNLWmY5Q25wOGUvSWhBQVYKVVRrYkx6SHNMMmNTdTF5bGtlUlE0YXJkYVhzK0RvWjA2SHhQckg2UnM0ekhmVG50STZSdVNVV1lxUUZ4cURLTgpBay90c3VjVXJRR2dDL2ZkK0VKWXpBblhvQjI0empJYWV5NmxvbU04NWJIeEFzdGhBZVFrd3ZxbmcrRUNFaEpRCjl3SURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVcVczZG9STUxLVHV4UTJZSTZkSXhLd2tnRjJrd0h3WURWUjBqQkJnd0ZvQVVxVzNkb1JNTApLVHV4UTJZSTZkSXhLd2tnRjJrd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCSWpjS1d6ZzB2azhCcWovbFBKCndSNG9WWUtyUWVKa0xoUEVQNmt0djFQWmtwaTdWVWhnNHdBQkRseTM0TUZOM1RURmd1VHpBS0Z3VC8rN0FZMDIKT2YzSmxwOVZIMExWVUxCOVJqalVyUHpJUGJGMFFWZDljZThHWWl0c0VCaHkzQ1JkWndCM1RGUU5oN2FJQS95YQpOakJ0RlJuMnlkZENFSVU3UzB5NWFvMDlGTEtKRkI4UktENGhtYXZPZXlmem1HQUN2NTlsSExxbDZGWVh0U3dKCjRYUUpHVlh6MHh3djd3a3JZMy9JZDBDdlUvVmFuRDRvZWVvVUlaYTRqeFNGOHFrSk1vSzI3eEZyb2dMMllZYlcKckhzZHBOeHlDZTNBcDlaeWxFaE8xVjhzeFVQaFEycFlBMUhmOERBYXlHaVloNzluYjgrcjF5L3RidXdyM2V1dQpuWEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd_cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVlVENDQTJHZ0F3SUJBZ0lVUHdxZGRnRnY3bUFSZG83L1VCazFwZW9tSmQwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEU0TURJd016QTROVEV3TUZvWERURTVNREl3TXpBNE5URXdNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdk5pdFJWdlBVSlU5ZlA4Mnh2elUKNTB4MFVLQklrYzcrdWI3ZGlSODczdmppZThGNm82SDVtOFpYUng4SU9oZWNWQWJzQmpNZTkvNGE0VW9jcitCTwo0VGk1aGt6VkVDeFNyNDRNNEtqMmlIb2JQYmNSNC9DSmQ1MUJuWklIVXNPb0VhVVFhRTVvd2ZOK1NkNGVUMDgvCmpnVExEL2p2ejVoenB2N1EwU2w5dTBNeWNEYTRUa2ZlcjZ6aDlhc216LzRLTGhETzdQVUdxVWVQYmM3dldtOG0KRWJ5SEt4Q3BMT1FVaFkzcXd4YytPZGoraUcrbkJtTkF6b0NQOS9sTDNRbnkvb3p2N3UxaHBSSHF5TC9QckwvNgpLMWQ3ZDVPMkdYRm5NdytpTEplVEl6NkZyOENYMncxRmJreVRnbnJFT2hEaEE3Z1NPaE81Wld0dHg1N0dQcEpjCkVRSURBUUFCbzRJQkh6Q0NBUnN3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJRemo3QVdPNDJUTGpveQpRbVdDNDI3V1I1OHhxREFmQmdOVkhTTUVHREFXZ0JTcGJkMmhFd3NwTzdGRFpnanAwakVyQ1NBWGFUQ0Jtd1lEClZSMFJCSUdUTUlHUWdncHJkV0psY201bGRHVnpnaEpyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFNDRm10MVltVnkKYm1WMFpYTXVaR1ZtWVhWc2RDNXpkbU9DSG10MVltVnlibVYwWlhNdVpHVm1ZWFZzZEM1emRtTXVZMngxYzNSbApjb0lrYTNWaVpYSnVaWFJsY3k1a1pXWmhkV3gwTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzaHdSL0FBQUJod1RBCnFEa0Nod1FLL2dBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQW5iUjM5cUxCUHNHbnpzQWlETnJlL0JpeDYKZHlmTlp3ZlZ4S25SUldyNjVzU0RiRVk1NUhWcllkRUFJcmNndFJ6Z1gycUExVFVlZ25NQTZ4Z1FNdFJyd0pIbApaNC80emtSSGdsNXNXWGs4UXcxWjY0NWFWTTVrR0cwUjRoTm12c1ZqMVVpVzZCZzJVSEZVeEFPTlllejNIcmN1CkhDZDRPSU5hNEplOTVlcHg2cHJ3SmdxUldFR0hCSlFnL3ZPb2pUbnlIWXJJa0UyRVRHMzk2a29sMFNhMFIyQTIKOTNGZjFzdFNPZHk1cTFWdUV0ZmFsZW1Jem9tRDJ6VC94T2Ridnl3bkROL0VwYWFrdm1XeGMwKzJ5UzhEYkhzMgpocFRwUk5PQm8vbEZISS9xU0twMlE5clM4dGFuR2dXUkxQZldUY3NOMDZJdVd3R2pKWU52K08ySVRrcHEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  etcd_key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdk5pdFJWdlBVSlU5ZlA4Mnh2elU1MHgwVUtCSWtjNyt1YjdkaVI4NzN2amllOEY2Cm82SDVtOFpYUng4SU9oZWNWQWJzQmpNZTkvNGE0VW9jcitCTzRUaTVoa3pWRUN4U3I0NE00S2oyaUhvYlBiY1IKNC9DSmQ1MUJuWklIVXNPb0VhVVFhRTVvd2ZOK1NkNGVUMDgvamdUTEQvanZ6NWh6cHY3UTBTbDl1ME15Y0RhNApUa2ZlcjZ6aDlhc216LzRLTGhETzdQVUdxVWVQYmM3dldtOG1FYnlIS3hDcExPUVVoWTNxd3hjK09kaitpRytuCkJtTkF6b0NQOS9sTDNRbnkvb3p2N3UxaHBSSHF5TC9QckwvNksxZDdkNU8yR1hGbk13K2lMSmVUSXo2RnI4Q1gKMncxRmJreVRnbnJFT2hEaEE3Z1NPaE81Wld0dHg1N0dQcEpjRVFJREFRQUJBb0lCQUdaRDZFRWhJTG1BdUJXUwpsM1ZXd1d5b0tHem8vNk9HTnNjYnB4aDBnNVdScmdSYW1ERTRxOVZCcVUzb2Jpb1hVeDdseUxicXhDQ0R5TWFyCnZiRTRoVDdOMnhueFRZZyttR0JkU25mMng5ck1WU2dzbFZHY2xyVGh3Z0MwYmFiU01aZXNqYUFPcGdneDlmZkcKZ3g5cnlQejlkNEdreXlqZVkvTFJGdi9OdWpySGtLRU15MDNIU2ZvZlAxR0xDdEFtR004TTJsYy9EeTFJV3NSSApzTithc3pRRzllU2xxdW1jL3NkUldqOE1SMEpNWUwrcENJZ1dGMWliN241Tk5RYXAwUWVmOVZqTTJxY2puK0NUCjNTUXltOU05TnhSV2JaNU5zcklQazZkZDZ1K3RFcjlLOXcxZWZ2SHVjZFUxaVczZE5lK1VqTXd6TURnbWdjanQKWklHMEF1a0NnWUVBMDlkamdBTlJ4WHhhUWtXKzNwQlc0bE9hNTFrS2tWSU5qdzloZ0RDalBBN28ycDM4VFhTYwpDQytuSlU0aGduM1QxMCtRZWlUazVkTEpnTDRabjdnS3UrQytReXdLWm0rTzBkUERkN3lKY3ViOURtOW5wSlMwCmNjT3FMMWZySE14eFJicVJlWDF0elhjR21NYm5QRGJYRFZlNXcxWjkxN3FCcko2bDdNVERiRE1DZ1lFQTVEWXgKMEFOaS9mOEVlcHJxVFo4RlNFYXRTdTdkanRSL0FPWG5oS242M2VxVEZqTXRGckdhUXpaS3RSK0I0ckpRU3pkYgp5bmdMaWNjeGF2M3lva05qUUdXU2tRNkdHMVpOUUFYU3pBT3BiNk1vUnRrU3BpbzNWUlhSencyZVdkSVR0TStBCi9MRU9JZjZtVmgwQThDSTVXaXBTMkdYZlIvRkxsTzZqQjU1Y2txc0NnWUJVbXNzMFR4OFRYa3kxOXlENXhtL00KeUZNdlhsSm9JM3NpemFQRkRLZkV6cmVVeUZBQnB6YkIxalpOSWQwa1BwaWlmelpXY2ZHeEQvUkdKS1liTWVlbgpqV1N2Y3lGY00rVzRTM2pma3o3WjB3THlCdkEvdk53c0sxY0d2WGc2OGpPekE0WWlIVVFETVN4RFMvMENBV3oxCitUbEptSHQ5OHhEakhpRnFaRk1nSFFLQmdFemN0L0JBZzhIYWQyNjM2SHhXTjlnOC9iYkVOdGtaVnVFOWpibVAKNm85OXB5YU4rL3l0dXJBeWcvejI3Szhtc1laejBiV2lzdmdubjh4U1Zic3pDU1d5VUNnTkJUd0YyQ1RkRVQ5bgphRlRTVmdsdXFTcFFBNnpqbVhPc09ZNDFCREFjeDJ2VVVsYyt4bFV3bFpWTFlaZXRzNU53MUVBTjFCQUlROTZZCkJzUGJBb0dBUWdaYVAwSHp6VGdXWDBxcHVHTTRDYVpiclRnaGc2TVowTitNV1RqV3Z2Qm10SFRjcklXQjZaYisKaG01Qkl4N2JmV0p5WXBPbWVOK0VOMkQ4WGJQTWNQYVQyUm00czFsQnVQNElOOVZjMWVHWlg1VkZVbjFIYUhReQp1RHRhb000dXVnVzlzZjhYY2MxWHZldVN2dTRZK1VOeGh6ckN1Vy9mL1VnSzkzRFpBdGM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---

# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: |
          [{"key": "dedicated", "value": "master", "effect": "NoSchedule" },
           {"key":"CriticalAddonsOnly", "operator":"Exists"}]
    spec:
      hostNetwork: true
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.0.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            - name: IP_AUTODETECTION_METHOD
              value: "interface=enp0s8"
            # Configure the IP Pool from which Pod IPs will be chosen.
            - name: CALICO_IPV4POOL_CIDR
              value: "172.30.0.0/16"
            - name: CALICO_IPV4POOL_IPIP
              value: "off"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "1440"
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9099
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v2.0.0
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
    scheduler.alpha.kubernetes.io/tolerations: |
      [{"key": "dedicated", "value": "master", "effect": "NoSchedule" },
       {"key":"CriticalAddonsOnly", "operator":"Exists"}]
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v2.0.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system